// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	articleFieldNames          = builder.RawFieldNames(&Article{})
	articleRows                = strings.Join(articleFieldNames, ",")
	articleRowsExpectAutoSet   = strings.Join(stringx.Remove(articleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	articleRowsWithPlaceHolder = strings.Join(stringx.Remove(articleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheZhifouArticleArticleIdPrefix = "cache:zhifouArticle:article:id:"
)

type (
	articleModel interface {
		Insert(ctx context.Context, data *Article) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Article, error)
		Update(ctx context.Context, data *Article) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultArticleModel struct {
		sqlc.CachedConn
		table string
	}

	Article struct {
		Id          int64    `db:"id"` // ID
		Title       string    `db:"title"`
		Content     string    `db:"content"`
		Cover       string    `db:"cover"`
		Description string    `db:"description"`
		AuthorId    uint64    `db:"author_id"` // ID
		Status      int64     `db:"status"`    //  0: 1: 2: 3:
		CommentNum  int64     `db:"comment_num"`
		LikeNum     int64     `db:"like_num"`
		CollectNum  int64     `db:"collect_num"`
		ViewNum     int64     `db:"view_num"`
		ShareNum    int64     `db:"share_num"`
		TagIds      string    `db:"tag_ids"` // ID
		PublishTime time.Time `db:"publish_time"`
		CreateTime  time.Time `db:"create_time"`
		UpdateTime  time.Time `db:"update_time"`
	}
)

func newArticleModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultArticleModel {
	return &defaultArticleModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`article`",
	}
}

func (m *defaultArticleModel) Delete(ctx context.Context, id uint64) error {
	zhifouArticleArticleIdKey := fmt.Sprintf("%s%v", cacheZhifouArticleArticleIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, zhifouArticleArticleIdKey)
	return err
}

func (m *defaultArticleModel) FindOne(ctx context.Context, id uint64) (*Article, error) {
	zhifouArticleArticleIdKey := fmt.Sprintf("%s%v", cacheZhifouArticleArticleIdPrefix, id)
	var resp Article
	err := m.QueryRowCtx(ctx, &resp, zhifouArticleArticleIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", articleRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultArticleModel) Insert(ctx context.Context, data *Article) (sql.Result, error) {
	zhifouArticleArticleIdKey := fmt.Sprintf("%s%v", cacheZhifouArticleArticleIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, articleRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Title, data.Content, data.Cover, data.Description, data.AuthorId, data.Status, data.CommentNum, data.LikeNum, data.CollectNum, data.ViewNum, data.ShareNum, data.TagIds, data.PublishTime)
	}, zhifouArticleArticleIdKey)
	return ret, err
}

func (m *defaultArticleModel) Update(ctx context.Context, data *Article) error {
	zhifouArticleArticleIdKey := fmt.Sprintf("%s%v", cacheZhifouArticleArticleIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, articleRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Title, data.Content, data.Cover, data.Description, data.AuthorId, data.Status, data.CommentNum, data.LikeNum, data.CollectNum, data.ViewNum, data.ShareNum, data.TagIds, data.PublishTime, data.Id)
	}, zhifouArticleArticleIdKey)
	return err
}

func (m *defaultArticleModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheZhifouArticleArticleIdPrefix, primary)
}

func (m *defaultArticleModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", articleRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultArticleModel) tableName() string {
	return m.table
}
