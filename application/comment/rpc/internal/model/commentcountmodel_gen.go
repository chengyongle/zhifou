// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	commentCountFieldNames          = builder.RawFieldNames(&CommentCount{})
	commentCountRows                = strings.Join(commentCountFieldNames, ",")
	commentCountRowsExpectAutoSet   = strings.Join(stringx.Remove(commentCountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	commentCountRowsWithPlaceHolder = strings.Join(stringx.Remove(commentCountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheZhifouCommentCommentCountIdPrefix = "cache:zhifouComment:commentCount:id:"
)

type (
	commentCountModel interface {
		Insert(ctx context.Context, data *CommentCount) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*CommentCount, error)
		Update(ctx context.Context, data *CommentCount) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultCommentCountModel struct {
		sqlc.CachedConn
		table string
	}

	CommentCount struct {
		Id             uint64    `db:"id"`     // ID
		BizId          string    `db:"biz_id"` // ID
		ObjId          uint64    `db:"obj_id"` // id
		CommentNum     int64     `db:"comment_num"`
		CommentRootNum int64     `db:"comment_root_num"`
		CreateTime     time.Time `db:"create_time"`
		UpdateTime     time.Time `db:"update_time"`
	}
)

func newCommentCountModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultCommentCountModel {
	return &defaultCommentCountModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`comment_count`",
	}
}

func (m *defaultCommentCountModel) Delete(ctx context.Context, id uint64) error {
	zhifouCommentCommentCountIdKey := fmt.Sprintf("%s%v", cacheZhifouCommentCommentCountIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, zhifouCommentCommentCountIdKey)
	return err
}

func (m *defaultCommentCountModel) FindOne(ctx context.Context, id uint64) (*CommentCount, error) {
	zhifouCommentCommentCountIdKey := fmt.Sprintf("%s%v", cacheZhifouCommentCommentCountIdPrefix, id)
	var resp CommentCount
	err := m.QueryRowCtx(ctx, &resp, zhifouCommentCommentCountIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", commentCountRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentCountModel) Insert(ctx context.Context, data *CommentCount) (sql.Result, error) {
	zhifouCommentCommentCountIdKey := fmt.Sprintf("%s%v", cacheZhifouCommentCommentCountIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, commentCountRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.BizId, data.ObjId, data.CommentNum, data.CommentRootNum)
	}, zhifouCommentCommentCountIdKey)
	return ret, err
}

func (m *defaultCommentCountModel) Update(ctx context.Context, data *CommentCount) error {
	zhifouCommentCommentCountIdKey := fmt.Sprintf("%s%v", cacheZhifouCommentCommentCountIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, commentCountRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.BizId, data.ObjId, data.CommentNum, data.CommentRootNum, data.Id)
	}, zhifouCommentCommentCountIdKey)
	return err
}

func (m *defaultCommentCountModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheZhifouCommentCommentCountIdPrefix, primary)
}

func (m *defaultCommentCountModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", commentCountRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCommentCountModel) tableName() string {
	return m.table
}
